Imports:{
    import static gate.Utils.*;
    import org.ratschlab.deidentifier.annotation.Utils;
}

Phase: ExtractMetadataKisim
Input: Token Lookup Patienteninformation Newline
Options: control=appelt

Macro: DOT
(
    {Token.string == "."}
)

Macro: COMMA
(
    {Token.string == ","}
)

// DUPONT-MEIER Vreni Gisela, geb. 27.02.1933, Musterstrase 42, CH-1234 Musterhausen
Rule: PatienteninformationExtraction
(
    (
        (
            (
               ({ Token within Patienteninformation, Token.orth == "allCaps" } |
                { Token within Patienteninformation, Token.string ==~ "[-']" })+
            ):lastname
            (({ Token within Patienteninformation, Token.string != ",", Token.kind != "number"})+):firstname
        ):fullname |
        (
            {Token.string ==~ "Herr|Frau"}
            (
                ({ Token within Patienteninformation, Token.string != ",", Token.kind != "number"}):firstname2
                (({ Token within Patienteninformation, Token.string != ",", Token.kind != "number"})+):lastname2
            ):fullname2
        )
    )
    (
       // additional name
       COMMA
       (({ Token within Patienteninformation, Token.string !=~ "[.,]"})[1,3]):additional_name
    )?
    COMMA
    (
        ({Token.string == "geb"} (DOT)?)?
        (
            {Token.kind == "number"} DOT
            {Token.kind == "number"} DOT
            {Token.kind == "number"}
        ): birthdate
        ((COMMA) | ({Newline}))
    )?
    (
        ({Token.string == "Pat"} {Token.string == "-"} {Token.string == "Nr"} (DOT)?)
        ({Token.kind == "number"}):patnr
        ((COMMA) | ({Newline}))
    )?
    (
        (
             (
                 {Token.string !=~ "[,.r]"} COMMA
             )? //strange addresses
            ( ({ Token within Patienteninformation, Token.string ==~ "\\p{javaUpperCase}\\p{javaLowerCase}+str"} (DOT) ?)
               | { Token within Patienteninformation, Token.string !=~ "[,.r]"}
            )+
            (
                {Token.string !=~ "[,.r]"} COMMA
            )? //strange addresses
        )+ : street
        (COMMA | {Newline})
        // whole rule is bascially ankered on PLZ
        (
            (
                ({Token.string ==~ "[A-Z]{1,3}"} {Token.string == "-"})? // country before PLZ
                {Token.kind == "number"}
            ) |
            (
                // british
                {Token.string == "GB"} {Token.string == "-"}
                //https://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Validation
                // splitting up regex, since tokenizer splits it into separate tokens
                {Token.string ==~ "[A-Za-z][A-Ha-hK-Yk-y]?"}
                {Token.string ==~ "[0-9][0-9]?"}
                ({Token.string ==~ "[A-Za-z]"})?
                {Token.string ==~ "[0-9]"}
                {Token.string ==~ "[A-Za-z]{2}"}
            )
        ): plz
        ({ Token within Patienteninformation, Token.string !=~ "[,r]"})+: city
    ): address
    ({Newline})?
    (COMMA)? ({Newline})?

) --> :birthdate.Date = { rule = "PatienteninformationExtraction", type="DOB"},
      :street.Location = { rule = "PatienteninformationExtraction", type="street"},
      :plz.Location = { rule = "PatienteninformationExtraction", type="zip"},
      :city.Location = { rule = "PatienteninformationExtraction", type="city"},
      :address.Address = { rule = "PatienteninformationExtraction", type="patient"},
      :patnr.ID = { rule = "PatienteninformationExtraction", type="patient ID"},
      :additional_name.Name = { rule = "PatienteninformationExtraction", type="patient"},
     {
         Utils.addNameAnnotation("PatienteninformationExtraction", "patient", "", "fullname", bindings, doc, outputAS);
         Utils.addNameAnnotation("PatienteninformationExtraction", "patient", "", "fullname2", bindings, doc, outputAS);

        Annotation an = null;

        if(bindings.containsKey("lastname")) {
            an = bindings.get("lastname").iterator().next();
        } else if(bindings.containsKey("lastname2"))  {
            an = bindings.get("lastname2").iterator().next();
        } else {
            return;
        }

        try {
            String lastname = stringFor(doc, an);

            if(lastname != null) {
                Set<String> s = new HashSet<>();
                s.add(lastname);

                String[] splitted = lastname.split("-");
                if(splitted.length > 0) {
                    s.add(splitted[0]); // adding first name of double names
                }

                FeatureMap docFeatures = doc.getFeatures();
                docFeatures.put("metaAnnot_Name", s);
            }
        } catch(Exception ex) {
            // TODO: investigate
            ex.printStackTrace();
        }
    }

Rule: AgeInPatientField
(
    ({Token.string ==~ "[1]?[0-9]{2}", Token within {Patienteninformation} }):tok
    {Token.string == "Jahre"}
) --> :tok.Age = { rule = "AgeInPatientField"}
