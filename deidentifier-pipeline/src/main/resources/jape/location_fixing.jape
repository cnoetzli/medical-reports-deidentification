Imports: {
    import org.ratschlab.deidentifier.annotation.Utils;
}

Phase: FixedTerms
Input: Token Lookup Location Name AddressField Newline
Options:control=appelt

Rule: RemoveFalsePositiveAnnotation
(
        ({Lookup.minorType ==~ "false_positives"}):fp_cand
) --> { Utils.removeFalsePositive(bindings, inputAS, outputAS); }

Rule: RemoveRawNull
(
    (({Token.string == "_"})[3] {Token.string == "raw"} {Token.string == "_"} {Token.string == "null"} ({Token.string == "_"})[3]):tok
) --> { Utils.removeRawNull(bindings, inputAS, outputAS); }

// remove Location annotation of cities with ambiguous names, e.g. Laufen, Mund etc
// Note, that a Location annotation might be readded later on in the pipeline by more specialized processing
Rule: RemoveAmbiguousCityAnnotation
(
    ({Lookup.majorType ==~ "location", Lookup.minorType ==~ "city_ambiguous"}):loc

) --> {
    Annotation an = bindings.get("loc").iterator().next();
    gate.Utils.getOverlappingAnnotations(inputAS, an).get("Location").forEach(a -> outputAS.remove(a));
}

Rule: StreetNamesFromGazetteer
(
    {Lookup.majorType ==~ "location", Lookup.minorType ==~ "street"}
    (({Token.string ==~ "[1-9][0-9]{0,2}"} ({Token.string ==~ "[A-Za-z]"})?))?
):loc --> :loc.Location = { rule = "StreetNamesFromGazetteer", type = "street" }

Rule: AddCantonAbbrev
(
    {Location} ({ Lookup.majorType ==~ "location", Lookup.minorType ==~ "cantons_abbrevs" })
):loc --> :loc.Location = { rule = "AddCantonAbbrev", type = "other" } // TODO: type could be taken from original location

Rule: AddCantonAbbrevName
(
    {Name}
    {Token.string == ","}
    ({ Lookup.majorType ==~ "location", Lookup.minorType ==~ "cantons_abbrevs" }):loc
) --> :loc.Location = { rule = "AddCantonAbbrevName", type = "other" } // TODO: type could be taken from original location

