Imports: {
    import org.ratschlab.deidentifier.annotation.Utils;
}

Phase: Dates
Input: Token Newline
Options:control=appelt

// 1 - 31
Macro: DAY_IN_MONTH
(
    {Token.string ==~ "(0?[1-9])|([1-2][0-9])|30|31"}
)

//Macro: FOUR_DIGIT
//({Token.kind == number, Token.length == "4"})

Macro: COMMA
({Token.string == ","})

Macro: SLASH
  ({Token.string == "/"})

Macro: DASH
  {Token.string == "-"}

Macro: SPACE
({Token.string == " "})

Macro: DOT
({Token.string == "."})

Macro: MONTH_NAME_LONG
(
    {Token.string ==~ "Januar|Februar|März|April|Mai|Juni|Juli|August|September|Oktober|November|Dezember|januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember|JANUAR|FEBRUAR|MÄRZ|APRIL|MAI|JUNI|JULI|AUGUST|SEPTEMBER|OKTOBER|NOVEMBER|DEZEMBER|January|February|March|April|May|June|July|August|September|November|December"}
)

Macro: MONTH_NAME_SHORT
(
    {Token.string ==~ "Jan|Feb|Mär|Apr|Mai|Jun|Jul|Aug|Sep|Sept|Okt|Nov|Dez"}
)

Macro: MONTH_NAME
(
    MONTH_NAME_SHORT | MONTH_NAME_LONG
)

// numerical months: 1-12 and 01, 02 ... 09
Macro: DAY_MONTH_NUM
(
    {Token.string ==~ "([0]?[1-9])|10|11|12"}
)

Macro: MONTH
(
    MONTH_NAME | DAY_MONTH_NUM
)

// 1990 - 2029 represented as 2 digit year.
Macro: TWO_DIGIT_YEAR
(
  {Token.string ==~ "(9[0-9])|([0-2][0-9])"}
)

// covering 1900 - 2029
Macro: FOUR_DIGIT_YEAR
(
    {Token.string ==~ "19[0-9]{2}"} | {Token.string ==~ "20[0-2][0-9]"}
)

Macro: YEAR
(
   FOUR_DIGIT_YEAR | TWO_DIGIT_YEAR
)

Macro: DATE_PRE
(
  {Token.string == "am"} |
  {Token.string == "ab"} |
  {Token.string == "bis"} |
  {Token.string == "den"} |
  {Token.string == "dem"} |
  {Token.string == "seit"} |
  {Token.string == "vom"} |
  {Token.string == "Erstdiagnose" } | // TODO probably need to generalize this a bit, e.g. *diagnose
  {Token.string ==~ "E[D|M|S]"} |
  {Token.string == "Aufenthalt"}
)

Macro: RANGE_SEPARATOR
(
    DASH |
    {Token.string ==~ "und|bis"} |
    {Token.string == "+"}
)

// TODO: move to lookups?
Macro: UNIT
(
    {Token.string ==~ "mg|min|mm|cm|mmol|Grad|Pkt|%|mml|mmHg|s|Punkte|Punkten|Pkt|Pkte|Glomeruli|Glomerula|IE|Jahren|J|E/ml"}
)

Macro: REGULAR_DOT_DATE
(
    (
        (DAY_IN_MONTH):day1 DOT (SPACE)?
        (DAY_MONTH_NUM):month1 DOT (SPACE)?
        (YEAR):year1
    ) |
    (
        (DAY_IN_MONTH):day1_slash SLASH (SPACE)?
        (DAY_MONTH_NUM):month1_slash SLASH (SPACE)?
        (YEAR):year1_slash
    )
)

// e.g. 20.03
Macro: DATE_NO_YEAR
(
    (DAY_IN_MONTH):day1 DOT (DAY_MONTH_NUM):month1
)

//////////////////////////////////////////////////////////////////

// Date Rules

/*
examples:
 22.01.09
 22.01.2009
*/
Rule: RegularDotDates
(
    (DATE_PRE)?
    (REGULAR_DOT_DATE) :date1
)
--> { Utils.addDateAnnotation("RegularDotDates", "other", bindings, doc, outputAS); }

Rule: RegularDotDatesNegativeSlash
(
    (DATE_PRE)?
    (DAY_IN_MONTH):day1 (SLASH) (SPACE)?
    (DAY_MONTH_NUM):month1 (SLASH) (SPACE)?
    (YEAR):year1
    UNIT
)
--> {}

/*
examples:
 2009-01-22
*/
Rule: IsoDates
(
    (FOUR_DIGIT_YEAR):year1 DASH
    (DAY_MONTH_NUM):month1 DASH
    (DAY_IN_MONTH):day1
):date1
--> { Utils.addDateAnnotation("IsoDates", "other", bindings, doc, outputAS); }

/*
examples:
 22.01.
*/
Rule: DotDatesNoYear
(
    (DATE_PRE)?
    (
        DATE_NO_YEAR DOT
    ) :date1
)
--> { Utils.addDateAnnotation("DotDatesNoYear", "other", bindings, doc, outputAS); }

// 28.11. 13.45 Uhr
// would be parsed as RegularDotDates
Rule: DotDatesNoYearWithTime
Priority: 1000
(
    (DATE_PRE)?
    (DATE_NO_YEAR DOT):date1
    {Token.string ==~ "[0-9]{2}"}
    DOT
    {Token.string ==~ "[0-9]{2}"}
    {Token.string == "Uhr"}
) -->  { Utils.addDateAnnotation("DotDatesNoYearWithTime", "other", bindings, doc, outputAS); }

/*
examples:
 am 22.01
*/
Rule: DotDatesNoYearTrigger
(
    (DATE_PRE)
    (DATE_NO_YEAR) :date1
)
--> { Utils.addDateAnnotation("DotDatesNoYearTrigger", "other", bindings, doc, outputAS); }

Rule: DotDatesNoYearTriggerNegative
Priority: 100
(
    (DATE_PRE)
    (DATE_NO_YEAR)
    (UNIT)
) --> {}

/*
examples:
 22.01:
*/
Rule: DotDatesNoYearRightTrigger
(
    (DATE_NO_YEAR) :date1
    {Token.string ==~ "um|[:)]"}
)
--> { Utils.addDateAnnotation("DotDatesNoYearRightTrigger", "other", bindings, doc, outputAS); }

/*
examples:
 22. Januar 09
 22. Januar
*/
Rule: MonthNameDate
(
    (DATE_PRE)?
    (
        (DAY_IN_MONTH):day1 DOT (SPACE)?
        (MONTH_NAME):month1 (SPACE)?
        ((YEAR):year1)?
    ) :date1
)
--> { Utils.addDateAnnotation("MonthNameDate", "other", bindings, doc, outputAS); }


/*
examples:
 12/2009
 10.2018
*/
Rule: MonthSlashDate
Priority: 100
(
    (DATE_PRE)?
    (
        (DAY_MONTH_NUM):month1 (SLASH | DOT) (FOUR_DIGIT_YEAR):year1
    ) :date1
)
--> { Utils.addDateAnnotation("MonthSlashDate", "other", bindings, doc, outputAS); }

/*
 12/09
 1/09
 01/09
*/
Macro: MONTH_SLASH_DATE_TWO_DIGIT_YEAR
(
    (
        (DAY_MONTH_NUM):month1 SLASH (TWO_DIGIT_YEAR):year1
        // don't want 10, 11, 12, 24, 25 as year, as they often are the max of some scale
        //(DAY_MONTH_NUM):month1 SLASH ({Token.string ==~ "(9[0-9])|0[0-9]|1[3-9]|20|21|22|23|2[6-9]"}):year1
    ):date1
)

Rule: MonthSlashDateTrigger
(
    (DATE_PRE)?
    MONTH_SLASH_DATE_TWO_DIGIT_YEAR
)
--> {
    if(Utils.possibleSlashDate(bindings, doc)) {
        Utils.addDateAnnotation("MonthSlashDateTrigger", "other", bindings, doc, outputAS);
    }
}

/*
  ED 3/10
  This would not get annotated in MonthSlashDateTrigger, since it looks more like a scale, but since there is some trigger
  on the left, go for date1 annotation
*/
Rule: MonthSlashDateLeftTrigger
Priority: 200
(
    (
        DATE_PRE |
        { Token.string ==~ "(.*[omie|graphie|opsie])|CT|MRI" }
    )
    MONTH_SLASH_DATE_TWO_DIGIT_YEAR
)
--> { Utils.addDateAnnotation("MonthSlashDateLeftTrigger", "other", bindings, doc, outputAS); }

Rule: MonthSlashDateNegativeUnit
Priority: 100
(
    (DATE_PRE)?
    MONTH_SLASH_DATE_TWO_DIGIT_YEAR
    UNIT
)
--> {}

Rule: MonthSlashDateNegativeScaleTrigger
Priority: 500
(
    {Token.string ==~ "Th|BWK|Bwk|VAS|gute|ATS|SUVmax|-"}
    MONTH_SLASH_DATE_TWO_DIGIT_YEAR
)
--> {}

// not annotating e.g. (7/10) as often a scale
//Rule: MonthSlashDateNegativeParenthesis
//(
//    {Token.string == "("}
//    MONTH_SLASH_DATE_TWO_DIGIT_YEAR
//    {Token.string == ")"}
//)
//--> {}

/*
examples:
  November 2011
  November 09
  Jan. 06
  August/2009
*/
Rule: MonthYear
(
    (
       (MONTH_NAME_SHORT (DOT)?) |
        MONTH_NAME_LONG
    ):month1
    (SLASH)?
    (YEAR):year1
):date1
--> { Utils.addDateAnnotation("MonthYear", "other", bindings, doc, outputAS); }


Rule: MonthYearUnspecificDate
(
    { Token.string ==~ "Anfang|Mitte|Ende" }
    (
        (
           (MONTH_NAME_SHORT (DOT)?) |
            MONTH_NAME_LONG
        ):month1
        ((YEAR):year1)?
    ):date1
)
--> { Utils.addDateAnnotation("MonthYearUnspecificDate", "other", bindings, doc, outputAS); }

// May 4, 2019
Rule: EnglishDates
(
    (MONTH_NAME):month1
    (DAY_IN_MONTH):day1
    (COMMA)?
    (FOUR_DIGIT_YEAR):year1
):date1
-->  { Utils.addDateAnnotation("EnglishDates", "other", bindings, doc, outputAS); }


/*
examples:
 im Oktober
*/
Rule: MonthNameOnly
(
    {Token.string ==~ "Im|im"}
    (
        (MONTH_NAME):month1
    ):date1
    (DOT)?
    {Token.string !=~ "[/0-9.]+"}  // don't interfer with MonthYear and ApproximateMonthYear
)
--> { Utils.addDateAnnotation("MonthNameOnly", "other", bindings, doc, outputAS); }

/*
examples:
  11.2015
*/
Rule: MonthYearNumerical
(
    (
        (DAY_MONTH_NUM):month1 DOT (FOUR_DIGIT_YEAR):year1
    ) :date1
)
--> { Utils.addDateAnnotation("MonthYearNumerical", "other", bindings, doc, outputAS); }

/*
examples:
  ED 1994 # Erstdiagnose
  ES 1994
*/
Rule: SingleYear
(
    (DATE_PRE)?
    ((FOUR_DIGIT_YEAR):year1):date1 // if no negative context, annotate.
)
--> { Utils.addDateAnnotation("SingleYear", "other", bindings, doc, outputAS); }

Rule: SingleYearNegative
Priority: 1000
(
    (
        (DATE_PRE)?
        (FOUR_DIGIT_YEAR)
        ({Token.string == "Uhr"}  | UNIT)// consume negative context
    )
) --> {}


/*
examples:
    seit 04
*/
Rule: SingleYearTwoDigits
(
    DATE_PRE
    ((TWO_DIGIT_YEAR):year1) :date1
)
--> { Utils.addDateAnnotation("SingleYearTwoDigits", "other", bindings, doc, outputAS); }

/*
examples:
    dem 13. Tag
*/
Rule: SingleYearTwoDigitsNegative
Priority: 1000
(
    DATE_PRE
    TWO_DIGIT_YEAR
    (DOT | UNIT)
)
--> {}

Rule: BirthYear
(
    {Token.string == "Jahrgang"}
    (
        ({Token.string ==~ "[0-9]{2}"} | {Token.string ==~ "[1,2][0-9]{3}"}):year1
    ):date1
) --> { Utils.addDateAnnotation("BirthYear", "DOB", bindings, doc, outputAS); }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Approximate Dates
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Oktober/November 2019
Rule: ApproximateMonthYear
(
  ((MONTH_NAME):month1):date1

  {Token.string == "/"}

  (
    (MONTH_NAME):month2
    (FOUR_DIGIT_YEAR | TWO_DIGIT_YEAR):year2
  ):date2
) --> {Utils.addDateAnnotation("ApproximateMonthYear", "other", bindings, doc, outputAS); }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DATE RANGES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
examples:
   18.01. - 08.02.2018
   18. - 19.01.2018
*/
Rule: DayRange
(
    (DATE_PRE)?
    (
        (DAY_IN_MONTH):day2 (DOT)?
        ((DAY_MONTH_NUM (DOT)?): month2)?
    ):date2
    (RANGE_SEPARATOR | SLASH)
    (REGULAR_DOT_DATE):date1
)
--> { Utils.addDateAnnotation("DayRange", "other", bindings, doc, outputAS); }

// 01.10 - 10.10
Rule: DayRangeNoYears
(
    (DATE_PRE)
    (
        ( (DAY_IN_MONTH):day1 DOT (DAY_MONTH_NUM):month1 (DOT)?):date1
        RANGE_SEPARATOR
        ( (DAY_IN_MONTH):day2 DOT (DAY_MONTH_NUM):month2 (DOT)?):date2
    )

) --> { Utils.addDateAnnotation("DayRangeNoYears", "other", bindings, doc, outputAS); }


Rule: DayRangeNoYearsNegative
Priority: 100
(
    // negative context
    ( DAY_IN_MONTH DOT DAY_MONTH_NUM (DOT)?)
    RANGE_SEPARATOR
    ( DAY_IN_MONTH DOT DAY_MONTH_NUM (DOT)?)
    UNIT
) --> {}

// 01.- 10.10
Rule: DayRangeNoYearsPartialMonths
(
    (DATE_PRE)
    (
        ( (DAY_IN_MONTH):day1 (DOT)?):date1
        RANGE_SEPARATOR
        ( (DAY_IN_MONTH):day2 DOT (DAY_MONTH_NUM):month2 (DOT)?):date2
    )

) --> { Utils.addDateAnnotation("DayRangeNoYearsPartialMonths", "other", bindings, doc, outputAS); }


/*
examples:
  10 - 11/2015
*/
Rule: YearMonthRange
(
    ((DAY_MONTH_NUM):month1 (SLASH (YEAR):year1)?): date1
    RANGE_SEPARATOR
    ((DAY_MONTH_NUM):month2 SLASH (YEAR):year2): date2
)
--> { Utils.addDateAnnotation("YearMonthRange", "other", bindings, doc, outputAS); }

Rule: YearMonthRangeNegative
(
    ((DAY_MONTH_NUM):month1 (SLASH (YEAR):year1)?): date1
    RANGE_SEPARATOR
    ((DAY_MONTH_NUM):month2 SLASH (YEAR):year2): date2
    UNIT
)
--> {}

/*
examples:
  1995-1997
  2007/2008
*/
Rule: YearRange
(
    ((FOUR_DIGIT_YEAR): year1): date1
    (RANGE_SEPARATOR | SLASH)
    ((YEAR): year2): date2
)
--> { Utils.addDateAnnotation("YearRange", "other", bindings, doc, outputAS); }

Rule: YearRangeNegative
Priority: 100
(
    FOUR_DIGIT_YEAR
    (RANGE_SEPARATOR | SLASH)
    YEAR
    UNIT
) --> {}


Rule: ConsumeCitations
Priority: 1000
(
    (
        {Token.string == "et"}
        {Token.string == "al"}
        (DOT)?
        (COMMA)?
    )
    YEAR
) --> {}
